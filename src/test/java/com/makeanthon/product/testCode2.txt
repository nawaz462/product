package com.makeanthon.product.Constants;

import java.util.HashSet;
import java.util.Set;

import org.springframework.stereotype.Component;

@Component
public class FilterParams {

	 Set<String> category =new HashSet<>();
	 Set<String> color=new HashSet<>();
	 Set<String> size=new HashSet<>();
	 Set<String> brand=new HashSet<>();
	 Set<String> priceRange=new HashSet<>();
	
	public Set<String> getCategory() {
		return category;
	}
	public void setCategory(Set<String> category) {
		this.category = category;
	}
	public Set<String> getColor() {
		return color;
	}
	public void setColor(Set<String> color) {
		this.color = color;
	}
	public Set<String> getSize() {
		return size;
	}
	public void setSize(Set<String> size) {
		this.size = size;
	}
	public Set<String> getBrand() {
		return brand;
	}
	public void setBrand(Set<String> brand) {
		this.brand = brand;
	}
	public Set<String> getPriceRange() {
		return priceRange;
	}
	public void setPriceRange(Set<String> priceRange) {
		this.priceRange = priceRange;
	}
	
}


-----

package com.makeanthon.product.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.makeanthon.product.Constants.FilterParams;
import com.makeanthon.product.service.ProductService;
import com.mongodb.DBObject;

@RestController
public class ProductsController {

	@Autowired
	ProductService productService;
	
	@RequestMapping(value="/products",method=RequestMethod.GET )
	public List<DBObject> getAllProducts(){

		return	productService.getAllProductsInfo();
	}
	
	@RequestMapping(value="/products/{prodName}",method=RequestMethod.GET )
	public List<DBObject> getAllProductsByName(@PathVariable("prodName") String productName){
		
		return	productService.getProductInfo(productName);
	}
	
	@RequestMapping(value="/products/{prodName}/applyFilter",method=RequestMethod.POST )
	public List<DBObject> getFilteredProducts(@PathVariable("prodName") String productName,@RequestBody FilterParams filterParams){
		
		return	productService.getFilteredProducts(productName,filterParams);
	}
	
}

----

package com.makeanthon.product.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Component;

import com.makeanthon.product.Constants.FilterParams;
import com.makeanthon.product.Repository.ProductDAO;
import com.mongodb.DBObject;

@Component
public class ProductService {

	@Autowired
	private MongoTemplate mongoTemplate;
	
	@Autowired
	private ProductDAO productRepo;
	
	public List<DBObject> getAllProductsInfo(){
		
		return	mongoTemplate.findAll(DBObject.class,"product");
	}

	public List<DBObject> getProductInfo(String productName) {

		return productRepo.findByName(productName);
	}

	public List<DBObject> getFilteredProducts(String productName, FilterParams filterParams) {
		
		return productRepo.findFilteredProducts(productName, filterParams);
	}
	
}

-----

package com.makeanthon.product.Repository;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Component;

import com.makeanthon.product.Constants.FilterParams;
import com.mongodb.DBObject;

@Component
public class ProductDAO {
	
	@Autowired
	MongoTemplate mongoTemplate;
	
	public List<DBObject> findByName(String productName) {

		Criteria searchByNameCriteria = Criteria.where("name").regex(productName,"i");
		return mongoTemplate.find(Query.query(searchByNameCriteria), DBObject.class, "product");
	}

	public List<DBObject> findFilteredProducts(String productName, FilterParams filterParams) {

		Criteria searchByFiltersCriteria = Criteria.where("name").regex(productName,"i");
		
		if(filterParams.getSize().size() > 0)
			searchByFiltersCriteria = searchByFiltersCriteria.and("size").in(filterParams.getSize());
		if(filterParams.getCategory().size() > 0)		
			searchByFiltersCriteria = searchByFiltersCriteria.and("category").in(filterParams.getCategory());
		if(filterParams.getBrand().size() > 0)		
			searchByFiltersCriteria = searchByFiltersCriteria.and("brand").in(filterParams.getBrand());
		if(filterParams.getColor().size() > 0)		
			searchByFiltersCriteria = searchByFiltersCriteria.and("color").in(filterParams.getColor());
		
		return mongoTemplate.find(Query.query(searchByFiltersCriteria), DBObject.class, "product");
	}

}
